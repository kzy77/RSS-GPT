<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>首页 | FreshRSS</title>
    <link href="https://freshrss.chunkj.us.kg" />
    <updated>Sat, 03 May 2025 18:23:42 GMT</updated>
    <author>
        <name></name>
    </author>
    <id></id>
    
    <entry>
        <title><![CDATA[根据点信息生成道路以及路口]]></title>
        <link href="https://www.cnblogs.com/codeOnMar/p/18454913" />
        <id>https://www.cnblogs.com/codeOnMar/p/18454913</id>
        <updated>Tue, 29 Apr 2025 15:30:00 +0800</updated>
        <summary type="html"><![CDATA[关键词：道路生成，路口生成，路径扩展，车道方向，交叉计算

<br><br>总结:
一、目标：
1. 自动道路生成：基于随机点信息，扩展生成具有一定宽度的道路，包括路沿点、道路中心点以及分上下行车道，车道方向与实际行驶方向一致。
2. 自动路口生成：在多条道路交叉时，自动计算生成道路路口，优化车辆在路口转弯的计算，并提升视觉美观度，避免线路交叉感。
二、实现原理...(此处文章未提供具体实现，因此无法总结)
]]></summary>
    </entry>
    
    <entry>
        <title><![CDATA[聊聊四种实时通信技术：长轮询、短轮询、WebSocket 和 SSE]]></title>
        <link href="https://www.cnblogs.com/makemylife/p/18843555" />
        <id>https://www.cnblogs.com/makemylife/p/18843555</id>
        <updated>Wed, 23 Apr 2025 21:52:00 +0800</updated>
        <summary type="html"><![CDATA[实时通信, 短轮询, 长轮询, WebSocket, SSE

<br><br>总结:
1. **短轮询:** 浏览器定时发送HTTP请求，服务器立即返回数据，实现简单但浪费资源且实时性差。
2. **长轮询:** 浏览器发送请求后，服务器保持连接直到有新数据才返回，减少资源浪费，但仍需建立和维护连接。
3. **WebSocket:** 建立持久双向连接，数据实时传输，服务器可主动推送，高效且实时性高，但实现相对复杂。
4. **SSE (Server-Sent Events):** 服务器单向推送数据到客户端，适用于只需要服务器向客户端发送数据的场景，实现简单，但不支持客户端向服务器发送数据。
]]></summary>
    </entry>
    
    <entry>
        <title><![CDATA[如何基于 Kestrel 实现 socks5 代理]]></title>
        <link href="https://www.cnblogs.com/fs7744/p/18842979" />
        <id>https://www.cnblogs.com/fs7744/p/18842979</id>
        <updated>Wed, 23 Apr 2025 16:57:00 +0800</updated>
        <summary type="html"><![CDATA[关键词: Kestrel, Yarp, L4, NZOrz, 轮子

<br><br>总结:
1.  作者之前开发了一个名为NZOrz的轮子，计划参照Kestrel和Yarp进行长期开发。
2.  由于各种个人原因（包括川普上台、关税等），作者无暇继续缓慢开发NZOrz。
3.  为了能够轻松应对未来（2025年），作者决定基于Kestrel重新实现L4处理功能。
4.  有朋友询问是否可以直接使用Kestrel实现L4处理。
5.  该项目旨在基于Kestrel提供L4级别的处理能力。
]]></summary>
    </entry>
    
</feed>